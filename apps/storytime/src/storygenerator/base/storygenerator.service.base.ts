/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Storygenerator as PrismaStorygenerator } from "@prisma/client";

export class StorygeneratorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StorygeneratorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storygenerator.count(args);
  }

  async storygenerators(
    args: Prisma.StorygeneratorFindManyArgs
  ): Promise<PrismaStorygenerator[]> {
    return this.prisma.storygenerator.findMany(args);
  }
  async storygenerator(
    args: Prisma.StorygeneratorFindUniqueArgs
  ): Promise<PrismaStorygenerator | null> {
    return this.prisma.storygenerator.findUnique(args);
  }
  async createStorygenerator(
    args: Prisma.StorygeneratorCreateArgs
  ): Promise<PrismaStorygenerator> {
    return this.prisma.storygenerator.create(args);
  }
  async updateStorygenerator(
    args: Prisma.StorygeneratorUpdateArgs
  ): Promise<PrismaStorygenerator> {
    return this.prisma.storygenerator.update(args);
  }
  async deleteStorygenerator(
    args: Prisma.StorygeneratorDeleteArgs
  ): Promise<PrismaStorygenerator> {
    return this.prisma.storygenerator.delete(args);
  }
}
